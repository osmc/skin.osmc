<?xml version="1.0" encoding="UTF-8"?>
<includes>

	<include file="Defaults.xml" />
	<include file="Include_Home_OSMC.xml" />
	<include file="Includes_Widgets.xml" />
	<include condition="System.HasAddon(script.skinshortcuts)" file="script-skinshortcuts-includes.xml" />
	<include condition="!System.HasAddon(script.skinshortcuts)" file="script-skinshortcuts-static.xml" />
	<include file="Include_DialogSettings.xml" />
	<include file="Viewtype50.xml" />
	<include file="Viewtype51.xml" />
	<include file="Viewtype511.xml" />
	<include file="Viewtype52.xml" />
	<include file="Viewtype521.xml" />
	<include file="Viewtype53.xml" />
	<include file="Viewtype531.xml" />
	<include file="Viewtype532.xml" />
	<include file="Viewtype533.xml" />
	<include file="Viewtype534.xml" />
	<include file="Viewtype54.xml" />
	<include file="Viewtype55.xml" />
	<include file="Variables.xml" />
	<include file="Coordinates_AddonBrowser.xml" />
	<include file="Coordinates_Custom_Backup.xml" />
	<include file="Coordinates_Custom_Cache_Progress.xml" />
	<include file="Coordinates_Custom_Customization.xml" />
	<include file="Coordinates_Custom_DialogMasking.xml" />
	<include file="Coordinates_Custom_Disabled_Add-on.xml" />
	<include file="Coordinates_Custom_Overlay_Debug.xml" />
	<include file="Coordinates_Custom_Welcome.xml" />
	<include file="Coordinates_DialogAddonInfo.xml" />
	<include file="Coordinates_DialogAddonSettings.xml" />
	<include file="Coordinates_DialogBusy.xml" />
	<include file="Coordinates_DialogButtonMenu.xml" />
	<include file="Coordinates_DialogConfirm.xml" />
	<include file="Coordinates_DialogContextMenu.xml" />
	<include file="Coordinates_DialogExtendedProgressBar.xml" />
	<include file="Coordinates_DialogFavourites.xml" />
	<include file="Coordinates_DialogFullScreenInfo.xml" />
	<include file="Coordinates_DialogGameControllers.xml" />
	<include file="Coordinates_DialogKeyboard.xml" />
	<include file="Coordinates_DialogMediaSource.xml" />
	<include file="Coordinates_DialogMusicInfo.xml" />
	<include file="Coordinates_DialogNotification.xml" />
	<include file="Coordinates_DialogNumeric.xml" />
	<include file="Coordinates_DialogPictureInfo.xml" />
	<include file="Coordinates_DialogPlayerProcessInfo.xml" />
	<include file="Coordinates_DialogPVRChannelGuide.xml" />
	<include file="Coordinates_DialogPVRChannelManager.xml" />
	<include file="Coordinates_DialogPVRChannelsOSD.xml" />
	<include file="Coordinates_DialogPVRGroupManager.xml" />
	<include file="Coordinates_DialogPVRGuideSearch.xml" />
	<include file="Coordinates_DialogPVRInfo.xml" />
	<include file="Coordinates_DialogSelect.xml" />
	<include file="Coordinates_DialogSeekBar.xml" />
	<include file="Coordinates_DialogSettings.xml" />
	<include file="Coordinates_DialogSlider.xml" />
	<include file="Coordinates_DialogSubtitles.xml" />
	<include file="Coordinates_DialogTextViewer.xml" />
	<include file="Coordinates_DialogVideoInfo.xml" />
	<include file="Coordinates_DialogVolumeBar.xml" />
	<include file="Coordinates_EventLog.xml" />
	<include file="Coordinates_FileBrowser.xml" />
	<include file="Coordinates_FileManager.xml" />
	<include file="Coordinates_GameOSD.xml" />
	<include file="Coordinates_Home.xml" />
	<include file="Coordinates_Includes.xml" />
	<include file="Coordinates_LoginScreen.xml" />
	<include file="Coordinates_MusicOSD.xml" />
	<include file="Coordinates_MusicVisualisation.xml" />
	<include file="Coordinates_MyGames.xml" />
	<include file="Coordinates_MyMusicNav.xml" />
	<include file="Coordinates_MyMusicPlaylistEditor.xml" />
	<include file="Coordinates_MyPics.xml" />
	<include file="Coordinates_MyPlaylist.xml" />
	<include file="Coordinates_MyPrograms.xml" />
	<include file="Coordinates_MyPVRChannels.xml" />
	<include file="Coordinates_MyPVRGuide.xml" />
	<include file="Coordinates_MyPVRRecordings.xml" />
	<include file="Coordinates_MyPVRSearch.xml" />
	<include file="Coordinates_MyPVRTimers.xml" />
	<include file="Coordinates_MyVideoNav.xml" />
	<include file="Coordinates_MyWeather.xml" />
	<include file="Coordinates_PlayerControls.xml" />
	<include file="Coordinates_script-skin_helper_service-ColorPicker.xml" />
	<include file="Coordinates_script-skinshortcuts.xml" />
	<include file="Coordinates_Settings.xml" />
	<include file="Coordinates_SettingsCategory.xml" />
	<include file="Coordinates_SettingsProfile.xml" />
	<include file="Coordinates_SettingsSystemInfo.xml" />
	<include file="Coordinates_SkinSettings.xml" />
	<include file="Coordinates_SmartPlaylistEditor.xml" />
	<include file="Coordinates_SmartPlaylistRule.xml" />
	<include file="Coordinates_Viewtype50.xml" />
	<include file="Coordinates_Viewtype51.xml" />
	<include file="Coordinates_Viewtype52.xml" />
	<include file="Coordinates_Viewtype53.xml" />
	<include file="Coordinates_Viewtype54.xml" />
	<include file="Coordinates_Viewtype55.xml" />
	<include file="Coordinates_Viewtype511.xml" />
	<include file="Coordinates_Viewtype521.xml" />
	<include file="Coordinates_Viewtype531.xml" />
	<include file="Coordinates_Viewtype532.xml" />
	<include file="Coordinates_Viewtype533.xml" />
	<include file="Coordinates_Viewtype534.xml" />
	<include file="Coordinates_VideoFullScreen.xml" />
	<include file="Coordinates_VideoOSD.xml" />
	<include file="Coordinates_VideoOSDBookmarks.xml" />

	<!-- Onloads -->
	<include name="Onloads">
		<onload condition="String.IsEmpty(Skin.String(PlotFont))">Skin.SetString(PlotFont,S)</onload>
		<onload condition="String.IsEmpty(Skin.String(HideOSD))">Skin.SetString(HideOSD,Always)</onload>
		<onload condition="String.IsEqual(Skin.String(HideOSD),Off)">Skin.SetString(HideOSD,Always)</onload>
		<onload condition="String.IsEmpty(Skin.String(NFDimOpac))">Skin.SetString(NFDimOpac,100)</onload>
		<onload condition="String.IsEqual(Skin.String(BackgroundImage),custom) + !String.IsEmpty(Skin.String(CustomBackground))">Skin.SetString(BackgroundDefaultImage,no)</onload>
		<onload condition="String.IsEqual(Skin.String(BackgroundImage),custom) + String.IsEmpty(Skin.String(CustomBackground))">Skin.SetString(BackgroundDefaultImage,yes)</onload>
		<onload condition="String.IsEmpty(Skin.String(BackgroundSingleImage))">Skin.SetString(BackgroundSingleImage,yes)</onload>
		<onload condition="String.IsEmpty(Skin.String(BackgroundImage))">Skin.SetString(BackgroundDefaultImage,yes)</onload>
		<onload condition="String.IsEmpty(Skin.String(BackgroundImage))">Skin.SetString(BackgroundImage,1)</onload>
		<onload condition="String.IsEqual(Skin.String(BackgroundImage),custom)">Skin.SetString(BackgroundImage,1)</onload>
		<onload condition="String.IsEqual(Skin.String(BackgroundDefaultImage),no) + String.IsEqual(Skin.String(BackgroundSingleImage),yes) + String.IsEmpty(Skin.String(CustomBackground))">Skin.SetString(BackgroundDefaultImage,yes)</onload>
		<onload condition="String.IsEqual(Skin.String(BackgroundDefaultImage),no) + String.IsEqual(Skin.String(BackgroundSingleImage),no) + String.IsEmpty(Skin.String(CustomBackgroundFolder))">Skin.SetString(BackgroundDefaultImage,yes)</onload>
		<onload condition="String.IsEmpty(Skin.String(color.text1))">Skin.SetString(color.text1,None)</onload>
		<onload condition="String.IsEmpty(Skin.String(color.text2))">Skin.SetString(color.text2,None)</onload>
		<onload condition="String.IsEmpty(Skin.String(color.text3))">Skin.SetString(color.text3,None)</onload>
		<onload condition="String.IsEmpty(Skin.String(color.text4))">Skin.SetString(color.text4,None)</onload>
		<onload condition="String.IsEmpty(Skin.String(color.darken))">Skin.SetString(color.darken,None)</onload>
		<onload condition="String.IsEmpty(Skin.String(color.overlayfo))">Skin.SetString(color.overlayfo,None)</onload>
		<onload condition="String.IsEmpty(Skin.String(color.overlaynf))">Skin.SetString(color.overlaynf,None)</onload>
		<onload condition="String.IsEmpty(Skin.String(color.selected))">Skin.SetString(color.selected,None)</onload>
		<onload condition="String.IsEmpty(Skin.String(color.fanartdiffuse))">Skin.SetString(color.fanartdiffuse,None)</onload>
		<onload condition="String.IsEmpty(Skin.String(color.homenf))">Skin.SetString(color.homenf,None)</onload>
		<onload condition="String.IsEmpty(Skin.String(color.dialog1))">Skin.SetString(color.dialog1,None)</onload>
		<onload condition="String.IsEmpty(Skin.String(color.dialog2))">Skin.SetString(color.dialog2,None)</onload>
		<onload condition="String.IsEmpty(Skin.String(color.disabled))">Skin.SetString(color.disabled,None)</onload>
		<onload condition="String.IsEmpty(Skin.String(color.invalid))">Skin.SetString(color.invalid,None)</onload>
		<onload condition="String.IsEmpty(Skin.String(color.dialogoverlayfo))">Skin.SetString(color.dialogoverlayfo,None)</onload>
		<onload condition="String.IsEmpty(Skin.String(color.dialogoverlaynf))">Skin.SetString(color.dialogoverlaynf,None)</onload>
		<onload condition="String.IsEmpty(Skin.String(color.background))">Skin.SetString(color.background,None)</onload>
		<onload condition="String.IsEmpty(Skin.String(color.overlay))">Skin.SetString(color.overlay,None)</onload>
		<onload condition="String.IsEqual(Skin.String(DefaultColorSet),Default)">Skin.SetString(DefaultColorSet,OSMC Blue)</onload>
		<onload condition="String.IsEmpty(Skin.String(DefaultColorSet))">Skin.SetString(DefaultColorSet,OSMC Blue)</onload>
		<onload condition="String.IsEmpty(Skin.String(DefaultColors))">Skin.SetString(DefaultColors,yes)</onload>
		<onload condition="String.IsEmpty(Skin.String(DefaultBackgroundOpacity))">Skin.SetString(DefaultBackgroundOpacity,High)</onload>
		<onload condition="String.IsEmpty(Skin.String(DefaultOverlayOpacity))">Skin.SetString(DefaultOverlayOpacity,High)</onload>
		<onload condition="String.IsEmpty(Skin.String(OSMCBackgroundOverlay))">Skin.SetString(OSMCBackgroundOverlay,1)</onload>
		<onload condition="String.IsEmpty(Skin.String(videoinfostartduration))">Skin.SetString(videoinfostartduration,10s)</onload>
		<onload condition="String.IsEmpty(Skin.String(videoinfoendduration))">Skin.SetString(videoinfoendduration,10s)</onload>
		<onload condition="String.IsEmpty(Skin.String(videodurationformat))">Skin.SetString(videodurationformat,Minutes)</onload>
		<onload condition="String.IsEmpty(Skin.String(CustomBackgroundFolderDuration))">Skin.SetString(CustomBackgroundFolderDuration,30s)</onload>
		<onload condition="String.IsEmpty(Skin.String(IndividualBackgroundFolderDuration))">Skin.SetString(IndividualBackgroundFolderDuration,30s)</onload>
		<onload condition="String.IsEmpty(Skin.String(AutoMusicVisPlaybackDuration))">Skin.SetString(AutoMusicVisPlaybackDuration,60s)</onload>
		<onload condition="String.IsEmpty(Skin.String(videoinfodialogfirstpage))">Skin.SetString(videoinfodialogfirstpage,Details)</onload>
		<onload condition="String.IsEmpty(Skin.String(mediaflags))">Skin.SetString(mediaflags,File)</onload>
		<onload condition="String.IsEmpty(Skin.String(MaskingBars))">Skin.SetString(MaskingBars,2.40:1)</onload>
	</include>
	
	<!-- Window animation -->
	<include name="WindowFadeAnimation">
		<animation effect="fade" start="0" end="100" time="200">WindowOpen</animation>
		<animation effect="fade" start="100" end="0" time="200">WindowClose</animation>
	</include>

	<!-- Visible animation -->
	<include name="VisibleFadeAnimation">
		<animation effect="fade" start="0" end="100" time="200">Visible</animation>
		<animation effect="fade" start="100" end="0" time="200">Hidden</animation>
	</include>
	
	<!-- Dialog animation -->
	<include name="DialogZoomAnimation">
		<animation type="WindowOpen">
			<effect type="zoom" start="70" end="100" center="auto" tween="back" easing="inout" time="300" />
			<effect type="fade" start="0" end="100" time="300" />
		</animation>
		<animation type="WindowClose">
			<effect type="zoom" start="100" end="70" center="auto" time="300" />
			<effect type="fade" start="100" end="0" time="300" />
		</animation>
	</include>

	<!-- Options animation -->
	<include name="OptionsAnimation">
		<animation type="Visible">
			<effect type="zoom" start="70" end="100" center="auto" tween="back" easing="inout" time="300" />
			<effect type="fade" start="0" end="100" time="150" delay="150" />
		</animation>
		<animation type="Hidden">
			<effect type="zoom" start="100" end="70" center="auto" time="300" />
			<effect type="fade" start="100" end="0" time="150" delay="150" />
		</animation>
	</include>

	<!-- OSD animations -->
	<include name="OSDOpenCloseAnimation">
		<animation type="WindowOpen">
			<effect type="zoom" start="90" end="100" center="auto" tween="back" easing="out" time="200" />
			<effect type="fade" start="0" end="100" time="200" />
		</animation>
		<animation type="WindowClose">
			<effect type="zoom" start="100" end="90" center="auto" easing="in" time="200" />
			<effect type="fade" start="100" end="0" time="200" />
		</animation>
	</include>
	
	<include name="OSDVisibleHiddenAnimation">
		<animation type="Visible">
			<effect type="zoom" start="90" end="100" center="auto" tween="back" easing="out" time="200"/>
			<effect type="fade" start="0" end="100" time="200"/>
		</animation>
		<animation type="Hidden">
			<effect type="zoom" start="100" end="90" center="auto" easing="in" time="200"/>
			<effect type="fade" start="100" end="0" time="200"/>
		</animation>
	</include>

	<!-- Window background image -->
	<include name="WindowBackgroundImage">
		<!-- Black background image -->
		<control type="image">
			<include>FullscreenDimensions</include>
			<texture background="true">common/white.png</texture>
			<colordiffuse>FF000000</colordiffuse>
			<aspectratio>scale</aspectratio>
		</control>
		<!-- Background video -->
		<control type="videowindow">
			<include>FullscreenDimensions</include>
			<visible>Player.HasVideo + Skin.HasSetting(BackgroundVideo)</visible>
		</control>

		<!-- Color -->
		<control type="image">
			<include>FullscreenDimensions</include>
			<texture background="true">common/white.png</texture>
			<colordiffuse>$VAR[SolidBackgroundColor]</colordiffuse>
			<visible>![Player.HasVideo + Skin.HasSetting(BackgroundVideo)]</visible>
			<visible>String.IsEqual(Skin.String(BackgroundDefaultImage),no) + String.IsEqual(Skin.String(BackgroundSingleImage),solid)</visible>
			<aspectratio>scale</aspectratio>
			<animation effect="fade" start="0" end="100" time="200" delay="70">Visible</animation>
			<animation effect="fade" start="100" end="0" time="200">Hidden</animation>
		</control>
		<!-- Single background image -->
		<control type="image">
			<include>FullscreenDimensions</include>
			<texture background="true">$VAR[OSMCBackgroundImage]</texture>
			<visible>![Player.HasVideo + Skin.HasSetting(BackgroundVideo)]</visible>
			<visible>![Player.HasAudio + [!String.IsEmpty(Window(Visualisation).Property(ArtistSlideshow.ArtworkReady) | !String.IsEmpty(Window(Visualisation).Property(ArtistSlideshow.Image))] + [Skin.HasSetting(EnableArtistFanart) | Window.IsVisible(visualisation)]]</visible>
			<visible>[String.IsEqual(Skin.String(BackgroundDefaultImage),yes) | String.IsEqual(Skin.String(BackgroundSingleImage),yes) | String.IsEqual(Skin.String(BackgroundSingleImage),no) + String.IsEmpty(Skin.String(CustomBackgroundFolder))] + String.IsEmpty(Container(9000).ListItem.Property(background))</visible>
			<aspectratio>scale</aspectratio>
			<animation effect="fade" start="0" end="100" time="200" delay="70">Visible</animation>
			<animation effect="fade" start="100" end="0" time="200">Hidden</animation>
		</control>
		<!-- Multiple background images -->
		<control type="multiimage">
			<include>FullscreenDimensions</include>
			<imagepath background="true">$VAR[OSMCBackgroundImage]</imagepath>
			<visible>![Player.HasVideo + Skin.HasSetting(BackgroundVideo)]</visible>
			<visible>![Player.HasAudio + [!String.IsEmpty(Window(Visualisation).Property(ArtistSlideshow.ArtworkReady) | !String.IsEmpty(Window(Visualisation).Property(ArtistSlideshow.Image))] + [Skin.HasSetting(EnableArtistFanart) | Window.IsVisible(visualisation)]]</visible>
			<visible>String.IsEqual(Skin.String(BackgroundSingleImage),no) + !String.IsEmpty(Skin.String(CustomBackgroundFolder)) + String.IsEmpty(Container(9000).ListItem.Property(background))</visible>
			<aspectratio>scale</aspectratio>
			<include>CustomBackgroundFolderDuration</include>
			<fadetime>2000</fadetime>
			<randomize>true</randomize>
			<loop>yes</loop>
			<animation effect="fade" start="0" end="100" time="200" delay="70">Visible</animation>
			<animation effect="fade" start="100" end="0" time="200">Hidden</animation>
			<include>WindowFadeAnimation</include>
		</control>
		
		<!-- Single individual background image -->
		<control type="image">
			<include>FullscreenDimensions</include>
			<texture background="true">$INFO[Container(9000).ListItem.Property(background)]</texture>
			<visible>![Player.HasVideo + Skin.HasSetting(BackgroundVideo)]</visible>
			<visible>![Player.HasAudio + [!String.IsEmpty(Window(Visualisation).Property(ArtistSlideshow.ArtworkReady) | !String.IsEmpty(Window(Visualisation).Property(ArtistSlideshow.Image))] + [Skin.HasSetting(EnableArtistFanart) | Window.IsVisible(visualisation)]]</visible>
			<visible>!String.IsEmpty(Container(9000).ListItem.Property(background)) + ![String.EndsWith(Container(9000).ListItem.Property(background),\) | String.EndsWith(Container(9000).ListItem.Property(background),/)] + Window.IsVisible(Home)</visible>
			<aspectratio>scale</aspectratio>
			<animation effect="fade" start="0" end="100" time="200" delay="70">Visible</animation>
			<animation effect="fade" start="100" end="0" time="200">Hidden</animation>
			<include>WindowFadeAnimation</include>
		</control>
		<!-- Multiple individual background images -->
		<control type="multiimage">
			<include>FullscreenDimensions</include>
			<imagepath background="true">$INFO[Container(9000).ListItem.Property(background)]</imagepath>
			<visible>![Player.HasVideo + Skin.HasSetting(BackgroundVideo)]</visible>
			<visible>![Player.HasAudio + [!String.IsEmpty(Window(Visualisation).Property(ArtistSlideshow.ArtworkReady) | !String.IsEmpty(Window(Visualisation).Property(ArtistSlideshow.Image))] + [Skin.HasSetting(EnableArtistFanart) | Window.IsVisible(visualisation)]]</visible>
			<visible>!String.IsEmpty(Container(9000).ListItem.Property(background)) + [String.EndsWith(Container(9000).ListItem.Property(background),\) | String.EndsWith(Container(9000).ListItem.Property(background),/)] + Window.IsVisible(Home)</visible>
			<aspectratio>scale</aspectratio>
			<include>IndividualBackgroundFolderDuration</include>
			<fadetime>2000</fadetime>
			<randomize>true</randomize>
			<loop>yes</loop>
			<animation effect="fade" start="0" end="100" time="200" delay="70">Visible</animation>
			<animation effect="fade" start="100" end="0" time="200">Hidden</animation>
			<include>WindowFadeAnimation</include>
		</control>
		
		<!-- Artists Slideshow -->
		<control type="image">
			<include>FullscreenDimensions</include>
			<aspectratio>scale</aspectratio>
			<fadetime>400</fadetime>
			<texture background="true">$INFO[Window(Visualisation).Property(ArtistSlideshow.Image)]</texture>
			<visible>Player.HasAudio + !String.IsEmpty(Window(Visualisation).Property(ArtistSlideshow.Image)) + [Skin.HasSetting(EnableArtistFanart) | Window.IsVisible(visualisation)]</visible>
			<animation effect="fade" start="0" end="100" time="200" delay="70">Visible</animation>
			<animation effect="fade" start="100" end="0" time="200">Hidden</animation>
			<include>WindowFadeAnimation</include>
		</control>
		<control type="multiimage">
			<include>FullscreenDimensions</include>
			<imagepath background="true">$INFO[Window(Visualisation).Property(ArtistSlideshow)]</imagepath>
			<aspectratio>scale</aspectratio>
			<timeperimage>10000</timeperimage>
			<fadetime>400</fadetime>
			<randomize>true</randomize>
			<loop>yes</loop>
			<visible>Player.HasAudio + !String.IsEmpty(Window(Visualisation).Property(ArtistSlideshow.ArtworkReady) + [Skin.HasSetting(EnableArtistFanart) | Window.IsVisible(visualisation)]</visible>
			<animation effect="fade" start="0" end="100" time="200" delay="70">Visible</animation>
			<animation effect="fade" start="100" end="0" time="200">Hidden</animation>
			<include>WindowFadeAnimation</include>
		</control>
		
		<!-- Fanart -->
		<control type="image" id="10000">
			<include>FullscreenDimensions</include>
			<texture background="true" fallback="transparent.png">$VAR[widgetBackground]</texture>
			<aspectratio>scale</aspectratio>
			<fadetime>400</fadetime>
			<visible>![Player.HasVideo + Skin.HasSetting(BackgroundVideo)]</visible>
			<visible>!Skin.HasSetting(HideFanart)</visible>
			<animation effect="fade" start="0" end="100" time="200" delay="70">Visible</animation>
			<animation effect="fade" start="100" end="0" time="200">Hidden</animation>
			<include>WindowFadeAnimation</include>
		</control>

		<!-- Visualisation -->
		<control type="visualisation">
			<include>FullscreenDimensions</include>
			<visible>Player.HasAudio + [Skin.HasSetting(BackgroundVisualisation) | Window.IsVisible(visualisation)]</visible>
			<animation effect="fade" start="0" end="100" time="200" delay="70">Visible</animation>
			<animation effect="fade" start="100" end="0" time="200">Hidden</animation>
			<include>WindowFadeAnimation</include>
		</control>

		<!-- Overlay -->
		<control type="image">
			<include>FullscreenDimensions</include>
			<texture background="true">$INFO[Skin.String(OSMCBackgroundOverlay),overlays/,.png]</texture>
			<colordiffuse>$VAR[BackgroundColor]</colordiffuse>
			<visible>!Window.Is(visualisation) | [Window.Is(visualisation) + [Player.ShowInfo | Window.IsActive(musicosd)]]</visible>
		</control>
	</include>
	
	<!-- Dialog fanart -->
	<include name="DialogFanart">
		<!-- Black background image -->
		<control type="image">
			<include>FullscreenDimensions</include>
			<texture background="true">common/white.png</texture>
			<colordiffuse>FF000000</colordiffuse>
			<aspectratio>scale</aspectratio>
			<include>DialogZoomAnimation</include>
		</control>
		<!-- Color -->
		<control type="image">
			<include>FullscreenDimensions</include>
			<texture background="true">common/white.png</texture>
			<colordiffuse>$VAR[SolidBackgroundColor]</colordiffuse>
			<visible>String.IsEqual(Skin.String(BackgroundDefaultImage),no) | String.IsEqual(Skin.String(BackgroundSingleImage),solid)</visible>
			<aspectratio>scale</aspectratio>
			<include>DialogZoomAnimation</include>
		</control>
		<!-- Single background image -->
		<control type="image">
			<include>FullscreenDimensions</include>
			<texture background="true">$VAR[OSMCBackgroundImage]</texture>
			<visible>[String.IsEqual(Skin.String(BackgroundDefaultImage),yes) | String.IsEqual(Skin.String(BackgroundSingleImage),yes) | String.IsEqual(Skin.String(BackgroundSingleImage),no) + String.IsEmpty(Skin.String(CustomBackgroundFolder))] + String.IsEmpty(Container(9000).ListItem.Property(background)) + String.IsEmpty(ListItem.Art(fanart))</visible>
			<aspectratio>scale</aspectratio>
			<include>DialogZoomAnimation</include>
		</control>
		<!-- Multiple background images -->
		<control type="multiimage">
			<include>FullscreenDimensions</include>
			<imagepath background="true">$VAR[OSMCBackgroundImage]</imagepath>
			<visible>String.IsEqual(Skin.String(BackgroundSingleImage),no) + !String.IsEmpty(Skin.String(CustomBackgroundFolder)) + String.IsEmpty(Container(9000).ListItem.Property(background)) + String.IsEmpty(ListItem.Art(fanart))</visible>
			<aspectratio>scale</aspectratio>
			<include>CustomBackgroundFolderDuration</include>
			<fadetime>2000</fadetime>
			<randomize>true</randomize>
			<loop>yes</loop>
			<include>DialogZoomAnimation</include>
		</control>
		<!-- Fanart -->
		<control type="image" id="10000">
			<include>FullscreenDimensions</include>
			<texture background="true" fallback="transparent.png">$INFO[ListItem.Art(fanart)]</texture>
			<aspectratio>scale</aspectratio>
			<fadetime>400</fadetime>
			<visible>!Skin.HasSetting(HideFanart)</visible>
			<include>DialogZoomAnimation</include>
		</control>
		<!-- Overlay -->
		<control type="image">
			<include>FullscreenDimensions</include>
			<texture background="true">$INFO[Skin.String(OSMCBackgroundOverlay),overlays/,.png]</texture>
			<colordiffuse>$VAR[BackgroundColor]</colordiffuse>
			<animation type="WindowOpen">
				<effect type="zoom" start="70" end="100" center="auto" tween="back" easing="inout" time="300" />
				<effect type="fade" start="0" end="100" time="300" tween="quadratic" easing="out" />
			</animation>
			<animation type="WindowClose">
				<effect type="zoom" start="100" end="70" center="auto" time="300" />
				<effect type="fade" start="100" end="0" time="300" tween="quadratic" easing="in" />
			</animation>
		</control>
	</include>

	<!-- Dialog fade background image -->
	<include name="DialogFadeBackgroundImage">
		<control type="image">
			<include>FullscreenDimensions</include>
			<texture colordiffuse="$VAR[DarkenColor]">dialogs/DialogTextBackground.png</texture>
			<animation effect="fade" start="0" end="100" time="200">WindowOpen</animation>
			<animation effect="fade" start="100" end="0" time="200">WindowClose</animation>
		</control>
	</include>

	<!-- Options background image -->
	<include name="OptionsBackgroundImage">
		<control type="image">
			<include>FullscreenDimensions</include>
			<texture border="20">dialogs/OptionsBackground.png</texture>
		</control>
	</include>
	
	<!-- Multi image individual background duration -->
	<include name="IndividualBackgroundFolderDuration">
		<include condition="String.IsEqual(Skin.String(IndividualBackgroundFolderDuration),5s)">IndividualBackgroundFolderDuration5</include>
		<include condition="String.IsEqual(Skin.String(IndividualBackgroundFolderDuration),6s)">IndividualBackgroundFolderDuration6</include>
		<include condition="String.IsEqual(Skin.String(IndividualBackgroundFolderDuration),8s)">IndividualBackgroundFolderDuration8</include>
		<include condition="String.IsEqual(Skin.String(IndividualBackgroundFolderDuration),10s)">IndividualBackgroundFolderDuration10</include>
		<include condition="String.IsEqual(Skin.String(IndividualBackgroundFolderDuration),15s)">IndividualBackgroundFolderDuration15</include>
		<include condition="String.IsEqual(Skin.String(IndividualBackgroundFolderDuration),20s)">IndividualBackgroundFolderDuration20</include>
		<include condition="String.IsEqual(Skin.String(IndividualBackgroundFolderDuration),30s)">IndividualBackgroundFolderDuration30</include>
		<include condition="String.IsEqual(Skin.String(IndividualBackgroundFolderDuration),1 min)">IndividualBackgroundFolderDuration60</include>
    </include>
	
	<include name="IndividualBackgroundFolderDuration5">
		<timeperimage>5000</timeperimage>
    </include>
    <include name="IndividualBackgroundFolderDuration6">
		<timeperimage>6000</timeperimage>
    </include>
    <include name="IndividualBackgroundFolderDuration8">
		<timeperimage>8000</timeperimage>
    </include>
    <include name="IndividualBackgroundFolderDuration10">
		<timeperimage>10000</timeperimage>
    </include>
    <include name="IndividualBackgroundFolderDuration15">
		<timeperimage>15000</timeperimage>
    </include>
    <include name="IndividualBackgroundFolderDuration20">
		<timeperimage>20000</timeperimage>
    </include>
    <include name="IndividualBackgroundFolderDuration30">
		<timeperimage>30000</timeperimage>
    </include>
    <include name="IndividualBackgroundFolderDuration60">
		<timeperimage>60000</timeperimage>
    </include>
	
	<!-- Multi image custom background duration -->
	<include name="CustomBackgroundFolderDuration">
		<include condition="String.IsEqual(Skin.String(CustomBackgroundFolderDuration),5s)">CustomBackgroundFolderDuration5</include>
		<include condition="String.IsEqual(Skin.String(CustomBackgroundFolderDuration),6s)">CustomBackgroundFolderDuration6</include>
		<include condition="String.IsEqual(Skin.String(CustomBackgroundFolderDuration),8s)">CustomBackgroundFolderDuration8</include>
		<include condition="String.IsEqual(Skin.String(CustomBackgroundFolderDuration),10s)">CustomBackgroundFolderDuration10</include>
		<include condition="String.IsEqual(Skin.String(CustomBackgroundFolderDuration),15s)">CustomBackgroundFolderDuration15</include>
		<include condition="String.IsEqual(Skin.String(CustomBackgroundFolderDuration),20s)">CustomBackgroundFolderDuration20</include>
		<include condition="String.IsEqual(Skin.String(CustomBackgroundFolderDuration),30s)">CustomBackgroundFolderDuration30</include>
		<include condition="String.IsEqual(Skin.String(CustomBackgroundFolderDuration),1 min)">CustomBackgroundFolderDuration60</include>
    </include>
	
	<include name="CustomBackgroundFolderDuration5">
		<timeperimage>5000</timeperimage>
    </include>
    <include name="CustomBackgroundFolderDuration6">
		<timeperimage>6000</timeperimage>
    </include>
    <include name="CustomBackgroundFolderDuration8">
		<timeperimage>8000</timeperimage>
    </include>
    <include name="CustomBackgroundFolderDuration10">
		<timeperimage>10000</timeperimage>
    </include>
    <include name="CustomBackgroundFolderDuration15">
		<timeperimage>15000</timeperimage>
    </include>
    <include name="CustomBackgroundFolderDuration20">
		<timeperimage>20000</timeperimage>
    </include>
    <include name="CustomBackgroundFolderDuration30">
		<timeperimage>30000</timeperimage>
    </include>
    <include name="CustomBackgroundFolderDuration60">
		<timeperimage>60000</timeperimage>
    </include>

	<!-- Time/Now playing -->
	<include name="Time">
		<param name="heading">$VAR[HeadingLabel]</param>
		<definition>
			<!-- Window heading -->
			<control type="fadelabel">
				<include>heading_coords</include>
				<aligny>top</aligny>
				<label>$PARAM[heading]</label>
				<font>Font33</font>
				<animation type="WindowOpen" condition="Window.Previous(startup)">
					<effect type="fade" start="50" end="100" time="200" tween="cubic" easing="out"/>
				</animation>
			</control>

			<!-- First letter indicator -->
			<control type="label">
				<include>firstletter_coords</include>
				<label>$INFO[ListItem.SortLetter]</label>
				<font>Font72-bold</font>
				<align>center</align>
				<aligny>bottom</aligny>
				<visible>Container.Scrolling</visible>
				<visible>!System.HasActiveModalDialog | Window.IsVisible(DialogSelect.xml) | Window.IsVisible(FileBrowser.xml)</visible>
				<visible>!String.IsEmpty(Container.Content) | String.StartsWith(Container.FolderPath,pvr://) | String.StartsWith(Container.FolderPath,sources://video/) | String.StartsWith(Container.FolderPath,sources://music/) | String.StartsWith(Container.FolderPath,addons://user/) | String.StartsWith(Container.FolderPath,addons://repo) | Window.IsVisible(DialogSelect.xml) | Window.IsVisible(FileBrowser.xml)</visible>
				<visible>!Container.Content(seasons)</visible>
				<visible>String.IsEqual(Container.SortMethod,$LOCALIZE[551]) | String.IsEqual(Container.SortMethod,$LOCALIZE[561]) | String.IsEqual(Container.SortMethod,$LOCALIZE[558]) | String.IsEqual(Container.SortMethod,$LOCALIZE[557]) | String.IsEqual(Container.SortMethod,$LOCALIZE[556]) | String.IsEqual(Container.SortMethod,$LOCALIZE[563] | String.IsEqual(Container.SortMethod,$LOCALIZE[566])</visible>
				<include>VisibleFadeAnimation</include>
				<include>WindowFadeAnimation</include>
			</control>

			<control type="group">
				<visible>!Window.IsVisible(notification) + !Window.IsVisible(extendedprogressdialog) + !Window.IsVisible(volumebar) + !String.IsEqual(Window(10000).Property(isCaching),True)</visible>

				<animation type="WindowOpen" condition="Window.Previous(startup)">
					<effect type="fade" start="50" end="100" time="200" tween="cubic" easing="out"/>
				</animation>
				<animation type="Visible">
					<effect type="slide" start="120,0" end="0,0" time="200" />
					<effect type="fade" start="0" end="100" time="200" />
				</animation>
				<animation type="Hidden">
					<effect type="slide" end="120,0" time="200" />
					<effect type="fade" start="100" end="0" time="200" />
				</animation>

				<!-- Time -->
				<control type="label">
					<include>time_coords1</include>
					<aligny>top</aligny>
					<align>right</align>
					<label>$INFO[System.Time]</label>
					<font>Font33</font>
					<textcolor>$VAR[TextColor1]</textcolor>
					<visible>!Player.HasMedia</visible>
				</control>
				<control type="label">
					<include>time_coords2</include>
					<aligny>top</aligny>
					<align>right</align>
					<label>$INFO[System.Date]</label>
					<font>Font33-light</font>
					<textcolor>$VAR[TextColor1]</textcolor>
					<visible>Skin.HasSetting(Dateaboveclock) + !Player.HasMedia</visible>
				</control>

				<control type="group">
					<visible>Player.HasMedia</visible>

					<!-- Now Playing - Video -->
					<control type="fadelabel">
						<include>nowplaying_coords1</include>
						<aligny>top</aligny>
						<align>right</align>
						<label>$INFO[VideoPlayer.TVShowTitle]</label>
						<label>$INFO[VideoPlayer.ChannelNumberLabel,[LIGHT](,)[/LIGHT] ]$INFO[VideoPlayer.ChannelName]</label>
						<label>$VAR[SEplaying,[LIGHT],[/LIGHT] ]$INFO[Player.Title]</label>
						<label>$INFO[VideoPlayer.EpisodeName]</label>
						<visible>!Player.HasGame + Player.HasVideo + !String.IsEmpty(VideoPlayer.EpisodeName) + !String.IsEmpty(VideoPlayer.TVShowTitle) + [!String.IsEmpty(VideoPlayer.ChannelNumberLabel) + !String.IsEmpty(VideoPlayer.ChannelName)]</visible>
					</control>
					
					<control type="fadelabel">
						<include>nowplaying_coords1</include>
						<aligny>top</aligny>
						<align>right</align>
						<label>$INFO[VideoPlayer.TVShowTitle]</label>
						<label>$INFO[VideoPlayer.ChannelNumberLabel,[LIGHT](,)[/LIGHT] ]$INFO[VideoPlayer.ChannelName]</label>
						<label>$VAR[SEplaying,[LIGHT],[/LIGHT] ]$INFO[Player.Title]</label>
						<visible>!Player.HasGame + Player.HasVideo + String.IsEmpty(VideoPlayer.EpisodeName) + !String.IsEmpty(VideoPlayer.TVShowTitle) + [!String.IsEmpty(VideoPlayer.ChannelNumberLabel) + !String.IsEmpty(VideoPlayer.ChannelName)]</visible>
					</control>
					
					<control type="fadelabel">
						<include>nowplaying_coords1</include>
						<aligny>top</aligny>
						<align>right</align>
						<label>$INFO[VideoPlayer.ChannelNumberLabel,[LIGHT](,)[/LIGHT] ]$INFO[VideoPlayer.ChannelName]</label>
						<label>$VAR[SEplaying,[LIGHT],[/LIGHT] ]$INFO[Player.Title]</label>
						<visible>!Player.HasGame + Player.HasVideo + String.IsEmpty(VideoPlayer.EpisodeName) + String.IsEmpty(VideoPlayer.TVShowTitle) + [!String.IsEmpty(VideoPlayer.ChannelNumberLabel) + !String.IsEmpty(VideoPlayer.ChannelName)]</visible>
					</control>
					
					<control type="fadelabel">
						<include>nowplaying_coords1</include>
						<aligny>top</aligny>
						<align>right</align>
						<label>$INFO[VideoPlayer.ChannelNumberLabel,[LIGHT](,)[/LIGHT] ]$INFO[VideoPlayer.ChannelName]</label>
						<label>$VAR[SEplaying,[LIGHT],[/LIGHT] ]$INFO[Player.Title]</label>
						<label>$INFO[VideoPlayer.EpisodeName]</label>
						<visible>!Player.HasGame + Player.HasVideo + !String.IsEmpty(VideoPlayer.EpisodeName) + String.IsEmpty(VideoPlayer.TVShowTitle) + [!String.IsEmpty(VideoPlayer.ChannelNumberLabel) + !String.IsEmpty(VideoPlayer.ChannelName)]</visible>
					</control>
					
					<control type="fadelabel">
						<include>nowplaying_coords1</include>
						<aligny>top</aligny>
						<align>right</align>
						<label>$VAR[SEplaying,[LIGHT],[/LIGHT] ]$INFO[Player.Title]</label>
						<label>$INFO[VideoPlayer.EpisodeName]</label>
						<visible>!Player.HasGame + Player.HasVideo + !String.IsEmpty(VideoPlayer.EpisodeName) + String.IsEmpty(VideoPlayer.TVShowTitle) + [String.IsEmpty(VideoPlayer.ChannelNumberLabel) + String.IsEmpty(VideoPlayer.ChannelName)]</visible>
					</control>
					
					<control type="fadelabel">
						<include>nowplaying_coords1</include>
						<aligny>top</aligny>
						<align>right</align>
						<label>$INFO[VideoPlayer.TVShowTitle]</label>
						<label>$VAR[SEplaying,[LIGHT],[/LIGHT] ]$INFO[Player.Title]</label>
						<label>$INFO[VideoPlayer.EpisodeName]</label>
						<visible>!Player.HasGame + Player.HasVideo + !String.IsEmpty(VideoPlayer.EpisodeName) + !String.IsEmpty(VideoPlayer.TVShowTitle) + [String.IsEmpty(VideoPlayer.ChannelNumberLabel) + String.IsEmpty(VideoPlayer.ChannelName)]</visible>
					</control>
					
					<control type="fadelabel">
						<include>nowplaying_coords1</include>
						<aligny>top</aligny>
						<align>right</align>
						<label>$INFO[VideoPlayer.TVShowTitle]</label>
						<label>$VAR[SEplaying,[LIGHT],[/LIGHT] ]$INFO[Player.Title]</label>
						<visible>!Player.HasGame + Player.HasVideo + String.IsEmpty(VideoPlayer.EpisodeName) + !String.IsEmpty(VideoPlayer.TVShowTitle) + [String.IsEmpty(VideoPlayer.ChannelNumberLabel) + String.IsEmpty(VideoPlayer.ChannelName)]</visible>
					</control>
					
					<control type="fadelabel">
						<include>nowplaying_coords1</include>
						<aligny>top</aligny>
						<align>right</align>
						<label>$VAR[SEplaying,[LIGHT],[/LIGHT] ]$INFO[Player.Title]</label>
						<visible>!Player.HasGame + Player.HasVideo + String.IsEmpty(VideoPlayer.EpisodeName) + String.IsEmpty(VideoPlayer.TVShowTitle) + [String.IsEmpty(VideoPlayer.ChannelNumberLabel) + String.IsEmpty(VideoPlayer.ChannelName)]</visible>
					</control>

					<!-- Now Playing - Audio -->
					<control type="fadelabel">
						<include>nowplaying_coords1</include>
						<aligny>top</aligny>
						<align>right</align>
						<label>$INFO[MusicPlayer.TrackNumber,[LIGHT],. [/LIGHT]]$INFO[MusicPlayer.Title]</label>
						<label>$INFO[MusicPlayer.Artist,[LIGHT],:  [/LIGHT]]$INFO[MusicPlayer.Album]</label>
						<visible>!Player.HasGame + Player.HasAudio + String.IsEmpty(VideoPlayer.ChannelName) + [!String.IsEmpty(MusicPlayer.Artist) + !String.IsEmpty(MusicPlayer.Album)]</visible>
					</control>
					
					<control type="fadelabel">
						<include>nowplaying_coords1</include>
						<aligny>top</aligny>
						<align>right</align>
						<label>$INFO[MusicPlayer.TrackNumber,[LIGHT],. [/LIGHT]]$INFO[MusicPlayer.Title]</label>
						<label>$INFO[MusicPlayer.Artist,[LIGHT],[/LIGHT]]</label>
						<visible>!Player.HasGame + Player.HasAudio + String.IsEmpty(VideoPlayer.ChannelName) + [!String.IsEmpty(MusicPlayer.Artist) + String.IsEmpty(MusicPlayer.Album)]</visible>
					</control>
					
					<control type="fadelabel">
						<include>nowplaying_coords1</include>
						<aligny>top</aligny>
						<align>right</align>
						<label>$INFO[MusicPlayer.TrackNumber,[LIGHT],. [/LIGHT]]$INFO[MusicPlayer.Title]</label>
						<label>$INFO[MusicPlayer.Album]</label>
						<visible>!Player.HasGame + Player.HasAudio + String.IsEmpty(VideoPlayer.ChannelName) + [String.IsEmpty(MusicPlayer.Artist) + !String.IsEmpty(MusicPlayer.Album)]</visible>
					</control>
					
					<control type="fadelabel">
						<include>nowplaying_coords1</include>
						<aligny>top</aligny>
						<align>right</align>
						<label>$INFO[MusicPlayer.TrackNumber,[LIGHT],. [/LIGHT]]$INFO[MusicPlayer.Title]</label>
						<visible>!Player.HasGame + Player.HasAudio + String.IsEmpty(VideoPlayer.ChannelName) + [String.IsEmpty(MusicPlayer.Artist) + String.IsEmpty(MusicPlayer.Album)]</visible>
					</control>
					
					<!-- Now Playing - PVR Recording -->
					<control type="fadelabel">
						<include>nowplaying_coords1</include>
						<aligny>top</aligny>
						<align>right</align>
						<label>$INFO[Player.Title]</label>
						<label>$INFO[VideoPlayer.ChannelNumberLabel,[LIGHT](,)[/LIGHT] ]$INFO[VideoPlayer.ChannelName]</label>
						<visible>!Player.HasGame + Player.HasAudio + !String.IsEmpty(VideoPlayer.ChannelName) + !String.IsEmpty(Player.Title)</visible>
					</control>
					
					<control type="fadelabel">
						<include>nowplaying_coords1</include>
						<aligny>top</aligny>
						<align>right</align>
						<label>$INFO[VideoPlayer.ChannelNumberLabel,[LIGHT](,)[/LIGHT] ]$INFO[VideoPlayer.ChannelName]</label>
						<visible>!Player.HasGame + Player.HasAudio + !String.IsEmpty(VideoPlayer.ChannelName) + String.IsEmpty(Player.Title)</visible>
					</control>
					
					<!-- Now Playing - Progress -->
					<control type="label">
						<include>nowplaying_coords2</include>
						<aligny>top</aligny>
						<align>right</align>
						<label>$INFO[Player.Time]$INFO[Player.Duration, / ,] ($INFO[System.Time,[LIGHT]$LOCALIZE[142] ,[/LIGHT]]$INFO[Player.FinishTime,[LIGHT] / $LOCALIZE[19081]: [/LIGHT]])</label>
						<visible>!Player.HasGame + !Pvr.IsPlayingTv + !Pvr.IsPlayingRadio + Integer.IsGreater(Player.Duration,0)</visible>
					</control>
					
					<control type="label">
						<include>nowplaying_coords2</include>
						<aligny>top</aligny>
						<align>right</align>
						<label>$INFO[Player.Time] ($INFO[System.Time,[LIGHT]$LOCALIZE[142] ,[/LIGHT]])</label>
						<visible>!Player.HasGame + !Pvr.IsPlayingTv + !Pvr.IsPlayingRadio + !Integer.IsGreater(Player.Duration,0)</visible>
					</control>
					
					<!-- Now Playing - Progress PVR -->
					<control type="label">
						<include>nowplaying_coords2</include>
						<aligny>top</aligny>
						<align>right</align>
						<label>$INFO[PVR.EpgEventElapsedTime]$INFO[PVR.EpgEventDuration, / ,] ($INFO[System.Time,[LIGHT]$LOCALIZE[142] ,[/LIGHT]]$INFO[PVR.EpgEventFinishTime,[LIGHT] / $LOCALIZE[19081]: [/LIGHT]])</label>
						<visible>Pvr.IsPlayingTv | Pvr.IsPlayingRadio</visible>
					</control>
					
					<!-- Player Icon -->
					<control type="image">
						<include>nowplaying_coords3</include>
						<aligny>top</aligny>
						<align>right</align>
						<texture background="true">$INFO[Player.Icon]</texture>
						<aspectratio aligny="center">keep</aspectratio>
					</control>

					<!-- Play/Paused Image -->
					<control type="image">
						<include>nowplaying_coords4</include>
						<texture colordiffuse="$VAR[DialogColor1]">osd/OSDPlayNF.png</texture>
						<visible>!Player.Paused</visible>
					</control>
					<control type="image">
						<include>nowplaying_coords4</include>
						<texture colordiffuse="$VAR[DialogColor1]">osd/OSDPauseNF.png</texture>
						<visible>Player.Paused</visible>
					</control>

				</control>
			</control>
		</definition>
	</include>

	<!-- Media Flags -->
	<include name="MediaFlags">
		<!-- File information -->
		<control type="group">
			<include>MediaFlags_coords1</include>
			<visible>Integer.IsGreater(Container.NumItems,0) + !ListItem.IsFolder</visible>
			<include>VisibleFadeAnimation</include>
			<animation effect="slide" time="0" start="0,0" end="0,32" condition="!String.IsEqual(Skin.String(mediaflags),None) + [Control.IsVisible(52) | Control.IsVisible(521) | Control.IsVisible(53) | Control.IsVisible(532) | Control.IsVisible(534) | Control.IsVisible(55)]">Conditional</animation>
			<animation effect="slide" time="0" start="0,0" end="0,-32" condition="!String.IsEqual(Skin.String(mediaflags),None) + [!String.IsEmpty(ListItem.AudioCodec) + String.IsEmpty(ListItem.VideoResolution) | String.IsEmpty(ListItem.AudioCodec) + !String.IsEmpty(ListItem.VideoResolution)] + [Control.IsVisible(52) | Control.IsVisible(521) | Control.IsVisible(53) | Control.IsVisible(532) | Control.IsVisible(534) | Control.IsVisible(55)]">Conditional</animation>
			<animation effect="slide" time="0" start="0,0" end="0,-16" condition="!String.IsEqual(Skin.String(mediaflags),None) + String.IsEmpty(ListItem.AudioCodec) + !String.IsEmpty(ListItem.VideoResolution) + ![Control.IsVisible(52) | Control.IsVisible(521) | Control.IsVisible(53) | Control.IsVisible(532) | Control.IsVisible(534) | Control.IsVisible(55)]">Conditional</animation>
			<animation effect="slide" time="0" start="0,0" end="0,-30" condition="String.IsEqual(Skin.String(mediaflags),None) | [String.IsEqual(Skin.String(mediaflags),File) + String.IsEmpty(ListItem.AudioCodec) + String.IsEmpty(ListItem.VideoResolution)] | [String.IsEqual(Skin.String(mediaflags),Language) + String.IsEmpty(ListItem.Property(AudioLanguage.1)) + String.IsEmpty(ListItem.Property(SubtitleLanguage.1)) + String.IsEmpty(ListItem.AudioCodec) + String.IsEmpty(ListItem.VideoResolution)]">Conditional</animation>
			<animation type="Conditional" reversible="false" condition="String.IsEqual(Skin.String(mediaflags),File) + ![String.IsEmpty(ListItem.Property(AudioLanguage.1)) + String.IsEmpty(ListItem.Property(SubtitleLanguage.1))] + System.IdleTime(1)" loop="true">
				<effect type="fade" start="100" end="0" time="200" delay="4000" />
				<effect type="fade" start="100" end="0" time="200" delay="9000" />
			</animation>
			<animation type="Conditional" reversible="false" condition="String.IsEqual(Skin.String(mediaflags),Language) + ![String.IsEmpty(ListItem.Property(AudioLanguage.1)) + String.IsEmpty(ListItem.Property(SubtitleLanguage.1))] + !System.IdleTime(1)">
				<effect type="fade" end="0" time="0" />
			</animation>
			<animation type="Conditional" reversible="false" condition="String.IsEqual(Skin.String(mediaflags),Language) + ![String.IsEmpty(ListItem.Property(AudioLanguage.1)) + String.IsEmpty(ListItem.Property(SubtitleLanguage.1))] + System.IdleTime(1)" loop="true">
				<effect type="fade" start="0" end="100" time="200" delay="4200" />
				<effect type="fade" start="100" end="0" time="200" delay="9000" />
			</animation>
			
			<!-- Video -->
			<control type="image">
				<include>MediaFlags_coords2</include>
				<colordiffuse>$VAR[TextColor2]</colordiffuse>
				<texture>Video.png</texture>
				<aspectratio align="left" aligny="bottom">keep</aspectratio>
				<visible>!String.IsEqual(Skin.String(mediaflags),None) + !String.IsEmpty(ListItem.VideoResolution)</visible>
				<animation effect="slide" time="0" start="0,0" end="0,32" condition="String.IsEmpty(ListItem.AudioCodec)">Conditional</animation>
			</control>
			<control type="fadelabel">
				<include>MediaFlags_coords3</include>
				<label>$VAR[VideoCodec]$VAR[VideoResolution, &#8226; ,]$INFO[ListItem.VideoAspect, &#8226; ,:1]</label>
				<font>Font30</font>
				<textcolor>$VAR[TextColor2]</textcolor>
				<visible>!String.IsEqual(Skin.String(mediaflags),None) + !String.IsEmpty(ListItem.VideoResolution)</visible>
				<animation effect="slide" time="0" start="0,0" end="0,32" condition="String.IsEmpty(ListItem.AudioCodec)">Conditional</animation>
			</control>
			
			<!-- Audio -->
			<control type="image">
				<include>MediaFlags_coords4</include>
				<colordiffuse>$VAR[TextColor2]</colordiffuse>
				<texture>osd/OSDAudioNF.png</texture>
				<aspectratio align="left" aligny="bottom">keep</aspectratio>
				<visible>!String.IsEqual(Skin.String(mediaflags),None) + !String.IsEmpty(ListItem.AudioCodec)</visible>
			</control>
			<control type="fadelabel">
				<include>MediaFlags_coords5</include>
				<label>$VAR[Audio]</label>
				<font>Font30</font>
				<textcolor>$VAR[TextColor2]</textcolor>
				<visible>!String.IsEqual(Skin.String(mediaflags),None) + !String.IsEmpty(ListItem.AudioCodec)</visible>
			</control>
			
			<!-- Duration -->
			<control type="image">
				<include>MediaFlags_coords6</include>
				<colordiffuse>$VAR[TextColor2]</colordiffuse>
				<texture>Duration.png</texture>
				<aspectratio align="left" aligny="bottom">keep</aspectratio>
				<visible>!String.IsEmpty(ListItem.Duration)</visible>
			</control>
			<control type="fadelabel">
				<include>MediaFlags_coords7</include>
				<label>$VAR[Duration]</label>
				<font>Font30</font>
				<textcolor>$VAR[TextColor2]</textcolor>
				<visible>!String.IsEmpty(ListItem.Duration) + [String.IsEqual(ListItem.Size,0 B) | String.IsEqual(ListItem.Size,0.000000 B)]</visible>
			</control>
			<control type="fadelabel">
				<include>MediaFlags_coords7</include>
				<label>$VAR[Duration]$INFO[ListItem.Size, &#8226; $LOCALIZE[289]: ,]</label>
				<font>Font30</font>
				<textcolor>$VAR[TextColor2]</textcolor>
				<visible>!String.IsEmpty(ListItem.Duration) + ![String.IsEqual(ListItem.Size,0 B) | String.IsEqual(ListItem.Size,0.000000 B)]</visible>
			</control>
		
		</control>
		
		<!-- Language information -->
		<control type="group">
			<include>MediaFlags_coords1</include>
			<visible>Integer.IsGreater(Container.NumItems,0) + !ListItem.IsFolder + !String.IsEqual(Skin.String(mediaflags),None) + ![String.IsEmpty(ListItem.Property(AudioLanguage.1)) + String.IsEmpty(ListItem.Property(SubtitleLanguage.1))]</visible>
			<include>VisibleFadeAnimation</include>
			<animation effect="slide" time="0" start="0,0" end="0,32" condition="Control.IsVisible(52) | Control.IsVisible(521) | Control.IsVisible(53) | Control.IsVisible(532) | Control.IsVisible(534) | Control.IsVisible(55)">Conditional</animation>
			<animation effect="slide" time="0" start="0,0" end="0,-32" condition="[String.IsEmpty(ListItem.Property(SubtitleLanguage.1)) + !String.IsEmpty(ListItem.Property(AudioLanguage.1)) | !String.IsEmpty(ListItem.Property(SubtitleLanguage.1)) + String.IsEmpty(ListItem.Property(AudioLanguage.1))] + [Control.IsVisible(52) | Control.IsVisible(521) | Control.IsVisible(53) | Control.IsVisible(532) | Control.IsVisible(534) | Control.IsVisible(55)]">Conditional</animation>
			<animation effect="slide" time="0" start="0,0" end="0,-16" condition="[String.IsEmpty(ListItem.Property(SubtitleLanguage.1)) + !String.IsEmpty(ListItem.Property(AudioLanguage.1)) | !String.IsEmpty(ListItem.Property(SubtitleLanguage.1)) + String.IsEmpty(ListItem.Property(AudioLanguage.1))] + ![Control.IsVisible(52) | Control.IsVisible(521) | Control.IsVisible(53) | Control.IsVisible(532) | Control.IsVisible(534) | Control.IsVisible(55)]">Conditional</animation>
			<animation type="Conditional" reversible="false" condition="String.IsEqual(Skin.String(mediaflags),Language) + System.IdleTime(1)" loop="true">
				<effect type="fade" start="100" end="0" time="200" delay="4000" />
				<effect type="fade" start="100" end="0" time="200" delay="9000" />
			</animation>
			<animation type="Conditional" reversible="false" condition="String.IsEqual(Skin.String(mediaflags),File) + !System.IdleTime(1)">
				<effect type="fade" end="0" time="0" />
			</animation>
			<animation type="Conditional" reversible="false" condition="String.IsEqual(Skin.String(mediaflags),File) + System.IdleTime(1)" loop="true">
				<effect type="fade" start="0" end="100" time="200" delay="4200" />
				<effect type="fade" start="100" end="0" time="200" delay="9000" />
			</animation>
			
			<!-- Audio -->
			<control type="image">
				<include>MediaFlags_coords8</include>
				<colordiffuse>$VAR[TextColor2]</colordiffuse>
				<texture>osd/OSDAudioNF.png</texture>
				<aspectratio align="left" aligny="bottom">keep</aspectratio>
				<visible>!String.IsEmpty(ListItem.Property(AudioLanguage.1))</visible>
				<animation effect="slide" time="0" start="0,0" end="0,32" condition="String.IsEmpty(ListItem.Property(SubtitleLanguage.1))">Conditional</animation>
			</control>
			<control type="fadelabel">
				<include>MediaFlags_coords3</include>
				<label>$VAR[AudioSimple]</label>
				<font>Font30</font>
				<textcolor>$VAR[TextColor2]</textcolor>
				<visible>!String.IsEmpty(ListItem.Property(AudioLanguage.1))</visible>
				<animation effect="slide" time="0" start="0,0" end="0,32" condition="String.IsEmpty(ListItem.Property(SubtitleLanguage.1))">Conditional</animation>
			</control>
			
			<!-- Subtitles -->
			<control type="image">
				<include>MediaFlags_coords9</include>
				<colordiffuse>$VAR[TextColor2]</colordiffuse>
				<texture>osd/OSDSubtitlesNF.png</texture>
				<aspectratio align="left" aligny="bottom">keep</aspectratio>
				<visible>!String.IsEmpty(ListItem.Property(SubtitleLanguage.1))</visible>
			</control>
			<control type="fadelabel">
				<include>MediaFlags_coords5</include>
				<label>$VAR[SubtitleSimple]</label>
				<font>Font30</font>
				<textcolor>$VAR[TextColor2]</textcolor>
				<visible>!String.IsEmpty(ListItem.Property(SubtitleLanguage.1))</visible>
			</control>
			
			<!-- Duration -->
			<control type="image">
				<include>MediaFlags_coords6</include>
				<colordiffuse>$VAR[TextColor2]</colordiffuse>
				<texture>Duration.png</texture>
				<aspectratio align="left" aligny="bottom">keep</aspectratio>
				<visible>!String.IsEmpty(ListItem.Duration)</visible>
			</control>
			<control type="fadelabel">
				<include>MediaFlags_coords7</include>
				<label>$VAR[Duration]</label>
				<font>Font30</font>
				<textcolor>$VAR[TextColor2]</textcolor>
				<visible>!String.IsEmpty(ListItem.Duration) + [String.IsEqual(ListItem.Size,0 B) | String.IsEqual(ListItem.Size,0.000000 B)]</visible>
			</control>
			<control type="fadelabel">
				<include>MediaFlags_coords7</include>
				<label>$VAR[Duration]$INFO[ListItem.Size, &#8226; $LOCALIZE[289]: ,]</label>
				<font>Font30</font>
				<textcolor>$VAR[TextColor2]</textcolor>
				<visible>!String.IsEmpty(ListItem.Duration) + ![String.IsEqual(ListItem.Size,0 B) | String.IsEqual(ListItem.Size,0.000000 B)]</visible>
			</control>
		
		</control>

	</include>

	<!-- Item count -->
	<include name="ItemCount">
		<control type="fadelabel">
			<include>ItemCount_coords</include>
			<label>$INFO[Container.NumItems]$VAR[ContentType, ,]</label>
			<font>Font30</font>
			<textcolor>$VAR[TextColor2]</textcolor>
			<align>right</align>
			<animation effect="fade" start="100" end="0" time="200" condition="Integer.IsEqual(Container.NumItems,0) + Window.IsVisible(busydialog)">Conditional</animation>
		</control>
	</include>

	<!-- Keyboard buttons -->
	<include name="KeyboardButtons">
		<include>KeyboardButtons_coords</include>
		<font>Font48</font>
		<align>center</align>
		<textoffsetx>10</textoffsetx>
		<fadetime>200</fadetime>
		<texturefocus colordiffuse="$VAR[TextColor1]" border="25,0,25,0">dialogs/KeyboardButton.png</texturefocus>
	</include>

	<!-- OSD Play buttons -->
	<include name="OSDPlayStopButtons">
		<control type="togglebutton" id="5">
			<include>OSDButtons_coords</include>
			<texturefocus colordiffuse="$VAR[DialogColor1]">osd/OSDPauseNF.png</texturefocus>
			<texturenofocus colordiffuse="$VAR[DialogColor2]">osd/OSDPauseNF.png</texturenofocus>
			<usealttexture>Player.Paused | Player.Forwarding | Player.Rewinding | Player.IsTempo</usealttexture>
			<alttexturefocus colordiffuse="$VAR[DialogColor1]">osd/OSDPlayNF.png</alttexturefocus>
			<alttexturenofocus colordiffuse="$VAR[DialogColor2]">osd/OSDPlayNF.png</alttexturenofocus>
			<onclick>PlayerControl(Play)</onclick>
		</control>
		<control type="button" id="6">
			<include>OSDButtons_coords</include>
			<texturefocus colordiffuse="$VAR[DialogColor1]">osd/OSDStopNF.png</texturefocus>
			<texturenofocus colordiffuse="$VAR[DialogColor2]">osd/OSDStopNF.png</texturenofocus>
			<onclick>PlayerControl(Stop)</onclick>
		</control>
	</include>

	<!-- OSD Stop buttons -->
	<include name="OSDStopButton">
		<control type="button" id="5">
			<include>OSDButtons_coords</include>
			<texturefocus colordiffuse="$VAR[DialogColor1]">osd/OSDStopNF.png</texturefocus>
			<texturenofocus colordiffuse="$VAR[DialogColor2]">osd/OSDStopNF.png</texturenofocus>
			<onclick>PlayerControl(Stop)</onclick>
		</control>
	</include>

	<!-- Side menu controls -->
	<include name="SideMenuControls">
	
		<!-- Spacer -->
		<control type="image" id="80001">
			<include>SideMenuControls_coords1</include>
			<texture colordiffuse="$VAR[OverlayColor]">transparent.png</texture>
			<visible>Player.HasMedia + !Skin.HasSetting(SubMenuControls)</visible>
			<animation effect="slide" start="-450,0" end="0,0" time="200">VisibleChange</animation>
		</control>
		
		<!-- Player controls -->
		<control type="grouplist" id="90000">
			<include>SideMenuControls_coords2</include>
			<itemgap>0</itemgap>
			<orientation>horizontal</orientation>
			<align>center</align>
			<visible>Player.HasMedia + !Skin.HasSetting(SubMenuControls)</visible>
			<animation effect="slide" start="-450,0" end="0,0" time="200">VisibleChange</animation>
			
			<!-- Fullscreen toggle -->
			<control type="button" id="90001">
				<include>SideMenuControls_coords3</include>
				<texturefocus colordiffuse="$VAR[DialogColor1]">osd/OSDFullscreenNF.png</texturefocus>
				<texturenofocus colordiffuse="$VAR[DialogColor2]">osd/OSDFullscreenNF.png</texturenofocus>
				<onclick>Fullscreen</onclick>
			</control>

			<!-- Spacer -->
			<control type="image" id="80023">
				<include>SideMenuControls_coords4</include>
				<texture>transparent.png</texture>
			</control>

			<!-- Skip Back -->
			<control type="button" id="90002">
				<include>SideMenuControls_coords5</include>
				<texturefocus colordiffuse="$VAR[DialogColor1]">osd/OSDTrickBackwardEnd.png</texturefocus>
				<texturenofocus colordiffuse="$VAR[DialogColor2]">osd/OSDTrickBackwardEnd.png</texturenofocus>
				<onclick>PlayerControl(Previous)</onclick>
				<visible>Player.SeekEnabled</visible>
			</control>
			<!-- Rewind -->
			<control type="togglebutton" id="90003">
				<include>SideMenuControls_coords6</include>
				<texturefocus colordiffuse="$VAR[DialogColor1]">osd/OSDTrickBackward.png</texturefocus>
				<texturenofocus colordiffuse="$VAR[DialogColor2]">osd/OSDTrickBackward.png</texturenofocus>
				<alttexturefocus colordiffuse="$VAR[DialogColor1]">osd/OSDTrickBackward.png</alttexturefocus>
				<alttexturenofocus colordiffuse="$VAR[DialogColor1]">osd/OSDTrickBackward.png</alttexturenofocus>
				<usealttexture>Control.HasFocus(90002)</usealttexture>
				<onclick>PlayerControl(Rewind)</onclick>
				<visible>Player.SeekEnabled</visible>
			</control>
			<!-- Tempo Down -->
			<control type="togglebutton" id="90004">
				<include>SideMenuControls_coords6</include>
				<texturefocus colordiffuse="$VAR[DialogColor1]">osd/OSDTrickBackward.png</texturefocus>
				<texturenofocus colordiffuse="$VAR[DialogColor2]">osd/OSDTrickBackward.png</texturenofocus>
				<alttexturefocus colordiffuse="$VAR[DialogColor1]">osd/OSDTrickBackward.png</alttexturefocus>
				<alttexturenofocus colordiffuse="$VAR[DialogColor1]">osd/OSDTrickBackward.png</alttexturenofocus>
				<usealttexture>Control.HasFocus(90002) | Control.HasFocus(90003)</usealttexture>
				<onclick>PlayerControl(TempoDown)</onclick>
				<visible>Player.SeekEnabled</visible>
				<enable>Player.TempoEnabled</enable>
			</control>

			<!-- Spacer -->
			<control type="image" id="80024">
				<include>SideMenuControls_coords4</include>
				<texture>transparent.png</texture>
				<visible>Player.SeekEnabled</visible>
			</control>
			
			<!-- Play/Pause -->
			<control type="togglebutton" id="90005">
				<include>SideMenuControls_coords3</include>
				<texturefocus colordiffuse="$VAR[DialogColor1]">osd/OSDPauseNF.png</texturefocus>
				<texturenofocus colordiffuse="$VAR[DialogColor2]">osd/OSDPauseNF.png</texturenofocus>
				<usealttexture>Player.Paused | Player.Forwarding | Player.Rewinding | Player.IsTempo</usealttexture>
				<alttexturefocus colordiffuse="$VAR[DialogColor1]">osd/OSDPlayNF.png</alttexturefocus>
				<alttexturenofocus colordiffuse="$VAR[DialogColor2]">osd/OSDPlayNF.png</alttexturenofocus>
				<onclick>PlayerControl(Play)</onclick>
				<visible>Player.PauseEnabled</visible>
			</control>
			
			<!-- Stop -->
			<control type="button" id="90006">
				<include>SideMenuControls_coords3</include>
				<texturefocus colordiffuse="$VAR[DialogColor1]">osd/OSDStopNF.png</texturefocus>
				<texturenofocus colordiffuse="$VAR[DialogColor2]">osd/OSDStopNF.png</texturenofocus>
				<onclick>PlayerControl(Stop)</onclick>
			</control>

			<!-- Spacer -->
			<control type="image" id="80025">
				<include>SideMenuControls_coords4</include>
				<texture>transparent.png</texture>
				<visible>Player.SeekEnabled</visible>
			</control>

			<!-- Tempo Up -->
			<control type="togglebutton" id="90007">
				<include>SideMenuControls_coords6</include>
				<texturefocus colordiffuse="$VAR[DialogColor1]">osd/OSDTrickForward.png</texturefocus>
				<texturenofocus colordiffuse="$VAR[DialogColor2]">osd/OSDTrickForward.png</texturenofocus>
				<alttexturefocus colordiffuse="$VAR[DialogColor1]">osd/OSDTrickForward.png</alttexturefocus>
				<alttexturenofocus colordiffuse="$VAR[DialogColor1]">osd/OSDTrickForward.png</alttexturenofocus>
				<usealttexture>Control.HasFocus(90008) | Control.HasFocus(90009)</usealttexture>
				<onclick>PlayerControl(TempoUp)</onclick>
				<visible>Player.SeekEnabled</visible>
				<enable>Player.TempoEnabled</enable>
			</control>
			<!-- Fast Forward -->
			<control type="togglebutton" id="90008">
				<include>SideMenuControls_coords6</include>
				<texturefocus colordiffuse="$VAR[DialogColor1]">osd/OSDTrickForward.png</texturefocus>
				<texturenofocus colordiffuse="$VAR[DialogColor2]">osd/OSDTrickForward.png</texturenofocus>
				<alttexturefocus colordiffuse="$VAR[DialogColor1]">osd/OSDTrickForward.png</alttexturefocus>
				<alttexturenofocus colordiffuse="$VAR[DialogColor1]">osd/OSDTrickForward.png</alttexturenofocus>
				<usealttexture>Control.HasFocus(90009)</usealttexture>
				<onclick>PlayerControl(Forward)</onclick>
				<visible>Player.SeekEnabled</visible>
			</control>
			<!-- Next -->
			<control type="button" id="90009">
				<include>SideMenuControls_coords5</include>
				<texturefocus colordiffuse="$VAR[DialogColor1]">osd/OSDTrickForwardEnd.png</texturefocus>
				<texturenofocus colordiffuse="$VAR[DialogColor2]">osd/OSDTrickForwardEnd.png</texturenofocus>
				<onclick>PlayerControl(Next)</onclick>
				<visible>Player.SeekEnabled</visible>
			</control>
			
		</control>
	</include>
	
	<!-- Dialog button background -->
	<include name="dialogButtonBackground">
		<definition>
			<control type="image">
				<include>dialogButtonBackground_coords1</include>
				<texture colordiffuse="$VAR[TextColor1]">common/Border.png</texture>
				<visible>ControlGroup($PARAM[id]).HasFocus</visible>
				<include>VisibleFadeAnimation</include>
			</control>
			<control type="image">
				<include>dialogButtonBackground_coords1</include>
				<texture colordiffuse="$VAR[TextColor2]">common/Border.png</texture>
				<visible>!ControlGroup($PARAM[id]).HasFocus</visible>
				<include>VisibleFadeAnimation</include>
			</control>
			<control type="image">
				<include>dialogButtonBackground_coords2</include>
				<texture colordiffuse="$VAR[TextColor1]">common/Border.png</texture>
				<visible>ControlGroup($PARAM[id]).HasFocus</visible>
				<include>VisibleFadeAnimation</include>
			</control>
			<control type="image">
				<include>dialogButtonBackground_coords2</include>
				<texture colordiffuse="$VAR[TextColor2]">common/Border.png</texture>
				<visible>!ControlGroup($PARAM[id]).HasFocus</visible>
				<include>VisibleFadeAnimation</include>
			</control>
			<control type="image">
				<include>dialogButtonBackground_coords3</include>
				<visible>ControlGroup($PARAM[id]).HasFocus</visible>
				<texture colordiffuse="$VAR[DarkenColor]">dialogs/DialogTextBackground.png</texture>
				<include>VisibleFadeAnimation</include>
			</control>
		</definition>
	</include>
	
	<!-- Context/Side menu indicator -->
	<include name="SubmenuIndicator">
		<definition>
			<control type="group">
				<visible>!ControlGroup(9002).HasFocus + !Window.IsVisible(shutdownmenu) + !Window.IsVisible(contextmenu) + [Control.IsVisible(50) | Control.IsVisible(51) | Control.IsVisible(511) | Control.IsVisible(53) | Control.IsVisible(531) | Control.IsVisible(532) | Control.IsVisible(533) | Control.IsVisible(534) | Control.IsVisible(54) | Control.IsVisible(55) | Window.IsVisible(eventlog)]</visible>
				<animation effect="fade" start="0" end="100" time="200">VisibleChange</animation>
				<animation effect="slide" time="200" start="-200,0" end="0,0">WindowOpen</animation>
				<animation effect="slide" time="200" start="0,0" end="-200,0">WindowClose</animation>
				<control type="image">
					<left>10</left>
					<centertop>50%</centertop>
					<width>30</width>
					<height>30</height>
					<texture colordiffuse="$VAR[DialogColor2]">sub-menu-left.png</texture>
				</control>
			</control>
			<control type="group">
				<visible>!ControlGroup(9002).HasFocus + !Window.IsVisible(shutdownmenu) + !Window.IsVisible(contextmenu) + [Control.IsVisible(52) | Control.IsVisible(521)]</visible>
				<animation effect="fade" start="0" end="100" time="200">VisibleChange</animation>
				<animation effect="slide" time="200" start="0,200" end="0,0">WindowOpen</animation>
				<animation effect="slide" time="200" start="0,0" end="0,200">WindowClose</animation>
				<control type="image">
					<bottom>10</bottom>
					<centerleft>50%</centerleft>
					<width>30</width>
					<height>30</height>
					<texture colordiffuse="$VAR[DialogColor2]">sub-menu-down.png</texture>
				</control>
			</control>
		</definition>
	</include>
	
	<!-- Dialog button indicator -->
	<include name="dialogButtonIndicator">
		<definition>
			<control type="group">
				<visible>$PARAM[visibility]</visible>
				<animation effect="fade" start="0" end="100" time="200">VisibleChange</animation>
				<animation effect="slide" time="200" start="-200,0" end="0,0" delay="300">WindowOpen</animation>
				<animation effect="slide" time="200" start="0,0" end="-200,0" delay="300">WindowClose</animation>
				<control type="image">
					<left>10</left>
					<centertop>50%</centertop>
					<width>30</width>
					<height>30</height>
					<texture colordiffuse="$VAR[DialogColor2]">sub-menu-left.png</texture>
				</control>
			</control>
			
			<control type="group">
				<visible>$PARAM[visibility]</visible>
				<animation effect="fade" start="0" end="100" time="200">VisibleChange</animation>
				<animation effect="slide" time="200" start="200,0" end="0,0" delay="300">WindowOpen</animation>
				<animation effect="slide" time="200" start="0,0" end="200,0" delay="300">WindowClose</animation>
				<control type="image">
					<right>10</right>
					<centertop>50%</centertop>
					<width>30</width>
					<height>30</height>
					<texture colordiffuse="$VAR[DialogColor2]">sub-menu-right.png</texture>
				</control>
			</control>
		</definition>
	</include>
	
	<!-- List indicators -->
	<include name="Indicators">
		<definition>
			<control type="group">
				<left>$PARAM[left]</left>
				<top>$PARAM[top]</top>
				<width>30</width>
				<height>$PARAM[height]</height>
				<control type="image">
					<left>0</left>
					<top>0</top>
					<width>30</width>
					<height>16</height>
					<colordiffuse>$VAR[TextColor2]</colordiffuse>
					<texture colordiffuse="$VAR[DialogColor2]">up.png</texture>

					<visible>Container($PARAM[container]).HasPrevious</visible>

					<animation type="Visible">
						<effect type="Fade" start="0" end="100" time="200"/>
						<effect type="slide" start="0,10" end="0,0" time="200"/>
					</animation>
					<animation type="Hidden">
						<effect type="Fade" start="100" end="0" time="200"/>
						<effect type="slide" start="0,0" end="0,-10" time="200"/>
					</animation>

				</control>
				<control type="image">
					<left>0</left>
					<bottom>0</bottom>
					<width>30</width>
					<height>16</height>
					<texture colordiffuse="$VAR[DialogColor2]">down.png</texture>

					<visible>Container($PARAM[container]).HasNext</visible>

					<animation type="Visible">
						<effect type="Fade" start="0" end="100" time="200"/>
						<effect type="slide" start="0,-10" end="0,0" time="200"/>
					</animation>
					<animation type="Hidden">
						<effect type="Fade" start="100" end="0" time="200"/>
						<effect type="slide" start="0,0" end="0,10" time="200"/>
					</animation>
				</control>
			</control>
		</definition>
	</include>

	<!-- Scope masking bars -->
	<include name="MaskingBars">
		<definition>
			<control type="image">
				<include>MaskingBars_coords1</include>
				<texture colordiffuse="FF000000">common/white.png</texture>
				<visible>True</visible>
				<animation effect="slide" end="0,1480" time="400" condition="String.IsEqual(Skin.String(MaskingBars),1.78:1)">Conditional</animation>
				<animation effect="slide" end="0,12" time="200" condition="String.IsEqual(Skin.String(MaskingBars),2.35:1)">Conditional</animation>
				<animation effect="slide" end="0,107" time="200" condition="String.IsEqual(Skin.String(MaskingBars),2.00:1)">Conditional</animation>
			</control>
			<control type="image">
				<include>MaskingBars_coords2</include>
				<texture colordiffuse="FF000000">common/white.png</texture>
				<visible>True</visible>
				<animation effect="slide" end="0,-1480" time="400" condition="String.IsEqual(Skin.String(MaskingBars),1.78:1)">Conditional</animation>
				<animation effect="slide" end="0,-12" time="200" condition="String.IsEqual(Skin.String(MaskingBars),2.35:1)">Conditional</animation>
				<animation effect="slide" end="0,-107" time="200" condition="String.IsEqual(Skin.String(MaskingBars),2.00:1)">Conditional</animation>
			</control>
		</definition>
	</include>

</includes>
